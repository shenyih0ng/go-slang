import { Chapter, Value } from '../types';
import * as list from './list';
import * as misc from './misc';
import * as stream from './stream';
export declare const chapter_1: {
    get_time: typeof misc.error_message;
    error_message: typeof misc.error_message;
    is_number: typeof misc.is_number;
    is_string: typeof misc.is_string;
    is_function: typeof misc.is_function;
    is_boolean: typeof misc.is_boolean;
    is_undefined: typeof misc.is_undefined;
    parse_int: typeof misc.parse_int;
    char_at: typeof misc.char_at;
    arity: typeof misc.arity;
    undefined: undefined;
    NaN: number;
    Infinity: number;
};
export declare const chapter_2: {
    pair: typeof list.pair;
    is_pair: typeof list.is_pair;
    head: typeof list.head;
    tail: typeof list.tail;
    is_null: typeof list.is_null;
    list: typeof list.list;
    is_list: typeof list.is_list;
    get_time: typeof misc.error_message;
    error_message: typeof misc.error_message;
    is_number: typeof misc.is_number;
    is_string: typeof misc.is_string;
    is_function: typeof misc.is_function;
    is_boolean: typeof misc.is_boolean;
    is_undefined: typeof misc.is_undefined;
    parse_int: typeof misc.parse_int;
    char_at: typeof misc.char_at;
    arity: typeof misc.arity;
    undefined: undefined;
    NaN: number;
    Infinity: number;
};
export declare const chapter_3: {
    set_head: typeof list.set_head;
    set_tail: typeof list.set_tail;
    array_length: typeof misc.array_length;
    is_array: typeof misc.is_array;
    stream_tail: typeof stream.stream_tail;
    stream: typeof stream.stream;
    pair: typeof list.pair;
    is_pair: typeof list.is_pair;
    head: typeof list.head;
    tail: typeof list.tail;
    is_null: typeof list.is_null;
    list: typeof list.list;
    is_list: typeof list.is_list;
    get_time: typeof misc.error_message;
    error_message: typeof misc.error_message;
    is_number: typeof misc.is_number;
    is_string: typeof misc.is_string;
    is_function: typeof misc.is_function;
    is_boolean: typeof misc.is_boolean;
    is_undefined: typeof misc.is_undefined;
    parse_int: typeof misc.parse_int;
    char_at: typeof misc.char_at;
    arity: typeof misc.arity;
    undefined: undefined;
    NaN: number;
    Infinity: number;
};
export declare const chapter_4: {
    parse: (str: string, chapter: Chapter) => any;
    tokenize: (str: string, chapter: Chapter) => any;
    apply_in_underlying_javascript: (fun: Function, args: Value) => any;
    set_head: typeof list.set_head;
    set_tail: typeof list.set_tail;
    array_length: typeof misc.array_length;
    is_array: typeof misc.is_array;
    stream_tail: typeof stream.stream_tail;
    stream: typeof stream.stream;
    pair: typeof list.pair;
    is_pair: typeof list.is_pair;
    head: typeof list.head;
    tail: typeof list.tail;
    is_null: typeof list.is_null;
    list: typeof list.list;
    is_list: typeof list.is_list;
    get_time: typeof misc.error_message;
    error_message: typeof misc.error_message;
    is_number: typeof misc.is_number;
    is_string: typeof misc.is_string;
    is_function: typeof misc.is_function;
    is_boolean: typeof misc.is_boolean;
    is_undefined: typeof misc.is_undefined;
    parse_int: typeof misc.parse_int;
    char_at: typeof misc.char_at;
    arity: typeof misc.arity;
    undefined: undefined;
    NaN: number;
    Infinity: number;
};
export declare const chapter_library_parser: {
    is_object: typeof misc.is_object;
    is_NaN: typeof misc.is_NaN;
    has_own_property: typeof misc.has_own_property;
    parse: (str: string, chapter: Chapter) => any;
    tokenize: (str: string, chapter: Chapter) => any;
    apply_in_underlying_javascript: (fun: Function, args: Value) => any;
    set_head: typeof list.set_head;
    set_tail: typeof list.set_tail;
    array_length: typeof misc.array_length;
    is_array: typeof misc.is_array;
    stream_tail: typeof stream.stream_tail;
    stream: typeof stream.stream;
    pair: typeof list.pair;
    is_pair: typeof list.is_pair;
    head: typeof list.head;
    tail: typeof list.tail;
    is_null: typeof list.is_null;
    list: typeof list.list;
    is_list: typeof list.is_list;
    get_time: typeof misc.error_message;
    error_message: typeof misc.error_message;
    is_number: typeof misc.is_number;
    is_string: typeof misc.is_string;
    is_function: typeof misc.is_function;
    is_boolean: typeof misc.is_boolean;
    is_undefined: typeof misc.is_undefined;
    parse_int: typeof misc.parse_int;
    char_at: typeof misc.char_at;
    arity: typeof misc.arity;
    undefined: undefined;
    NaN: number;
    Infinity: number;
};
declare const _default: {
    1: {
        get_time: typeof misc.error_message;
        error_message: typeof misc.error_message;
        is_number: typeof misc.is_number;
        is_string: typeof misc.is_string;
        is_function: typeof misc.is_function;
        is_boolean: typeof misc.is_boolean;
        is_undefined: typeof misc.is_undefined;
        parse_int: typeof misc.parse_int;
        char_at: typeof misc.char_at;
        arity: typeof misc.arity;
        undefined: undefined;
        NaN: number;
        Infinity: number;
    };
    2: {
        pair: typeof list.pair;
        is_pair: typeof list.is_pair;
        head: typeof list.head;
        tail: typeof list.tail;
        is_null: typeof list.is_null;
        list: typeof list.list;
        is_list: typeof list.is_list;
        get_time: typeof misc.error_message;
        error_message: typeof misc.error_message;
        is_number: typeof misc.is_number;
        is_string: typeof misc.is_string;
        is_function: typeof misc.is_function;
        is_boolean: typeof misc.is_boolean;
        is_undefined: typeof misc.is_undefined;
        parse_int: typeof misc.parse_int;
        char_at: typeof misc.char_at;
        arity: typeof misc.arity;
        undefined: undefined;
        NaN: number;
        Infinity: number;
    };
    3: {
        set_head: typeof list.set_head;
        set_tail: typeof list.set_tail;
        array_length: typeof misc.array_length;
        is_array: typeof misc.is_array;
        stream_tail: typeof stream.stream_tail;
        stream: typeof stream.stream;
        pair: typeof list.pair;
        is_pair: typeof list.is_pair;
        head: typeof list.head;
        tail: typeof list.tail;
        is_null: typeof list.is_null;
        list: typeof list.list;
        is_list: typeof list.is_list;
        get_time: typeof misc.error_message;
        error_message: typeof misc.error_message;
        is_number: typeof misc.is_number;
        is_string: typeof misc.is_string;
        is_function: typeof misc.is_function;
        is_boolean: typeof misc.is_boolean;
        is_undefined: typeof misc.is_undefined;
        parse_int: typeof misc.parse_int;
        char_at: typeof misc.char_at;
        arity: typeof misc.arity;
        undefined: undefined;
        NaN: number;
        Infinity: number;
    };
    4: {
        parse: (str: string, chapter: Chapter) => any;
        tokenize: (str: string, chapter: Chapter) => any;
        apply_in_underlying_javascript: (fun: Function, args: any) => any;
        set_head: typeof list.set_head;
        set_tail: typeof list.set_tail;
        array_length: typeof misc.array_length;
        is_array: typeof misc.is_array;
        stream_tail: typeof stream.stream_tail;
        stream: typeof stream.stream;
        pair: typeof list.pair;
        is_pair: typeof list.is_pair;
        head: typeof list.head;
        tail: typeof list.tail;
        is_null: typeof list.is_null;
        list: typeof list.list;
        is_list: typeof list.is_list;
        get_time: typeof misc.error_message;
        error_message: typeof misc.error_message;
        is_number: typeof misc.is_number;
        is_string: typeof misc.is_string;
        is_function: typeof misc.is_function;
        is_boolean: typeof misc.is_boolean;
        is_undefined: typeof misc.is_undefined;
        parse_int: typeof misc.parse_int;
        char_at: typeof misc.char_at;
        arity: typeof misc.arity;
        undefined: undefined;
        NaN: number;
        Infinity: number;
    };
    100: {
        is_object: typeof misc.is_object;
        is_NaN: typeof misc.is_NaN;
        has_own_property: typeof misc.has_own_property;
        parse: (str: string, chapter: Chapter) => any;
        tokenize: (str: string, chapter: Chapter) => any;
        apply_in_underlying_javascript: (fun: Function, args: any) => any;
        set_head: typeof list.set_head;
        set_tail: typeof list.set_tail;
        array_length: typeof misc.array_length;
        is_array: typeof misc.is_array;
        stream_tail: typeof stream.stream_tail;
        stream: typeof stream.stream;
        pair: typeof list.pair;
        is_pair: typeof list.is_pair;
        head: typeof list.head;
        tail: typeof list.tail;
        is_null: typeof list.is_null;
        list: typeof list.list;
        is_list: typeof list.is_list;
        get_time: typeof misc.error_message;
        error_message: typeof misc.error_message;
        is_number: typeof misc.is_number;
        is_string: typeof misc.is_string;
        is_function: typeof misc.is_function;
        is_boolean: typeof misc.is_boolean;
        is_undefined: typeof misc.is_undefined;
        parse_int: typeof misc.parse_int;
        char_at: typeof misc.char_at;
        arity: typeof misc.arity;
        undefined: undefined;
        NaN: number;
        Infinity: number;
    };
};
export default _default;
export * as list from './list';
export * as misc from './misc';
export * as stream from './stream';
